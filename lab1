##
## Program1.asm - prints out "hello world"
##
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################
##
## Program2.asm asks user for temperature in Celsius,
##  converts to Fahrenheit, prints the result.
##
##	v0 - reads in Celsius
##	t0 - holds Fahrenheit result
##	a0 - points to output strings
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$v0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm
##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
.globl __start
 
__start:		# execution starts here
	li $a0,7	# to calculate fib(7)
	jal fib		# call fib
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	la $a0,endl	# print newline
	li $v0,4
	syscall

	li $v0,10
	syscall		# bye bye

#------------------------------------------------


fib:	move $v0,$a0    # initialise last element
    li $t0,0    # fib(0) = 0
    li $t1,1    # fib(1) = 1

    beq $a0,0,done # if n == 0, return 0
    beq $a0,1,done # if n == 1, return 1

loop:	add $t2,$t0,$t1  # get next value
        move $t0,$t1      # update second last
        move $t1,$t2      # update last element
        sub $a0,$a0,1     # decrement count
        bgt $a0,1,loop    # exit loop when count=1
    move $v0,$t2          # Move result to $v0
    jr $ra
done:	move $v0,$a0    # Return n if n == 0 or n == 1
    	jr $ra
#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
endl:	.asciiz "\n"

##
	.text
	.globl _start
	
_start:
	la $a0,prompt
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	
	move $t0,$v0
	
	la $a0,prompt2
	li $v0,4
	syscall
	
	li $v0,5
	syscall
	
	move $t1,$v0
	
	#  $t0=a  $t1=b
	
	mul $t2,$t1,$t0
	#printing
	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t2	# print integer result
	li $v0,1		# using syscall 1
	syscall
	
	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall
	
	add $t3,$t2,$t1
	#printing
	la $a0,ans2	# print string before result
	li $v0,4
	syscall

	move $a0,$t3	# print integer result
	li $v0,1		# using syscall 1
	syscall
	
	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall
	
	div $t4,$t3,$t0
	#printing
	la $a0,ans3	# print string before result
	li $v0,4
	syscall

	move $a0,$t4	# print integer result
	li $v0,1		# using syscall 1
	syscall
	
	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall
	
	div $t4,$t1
	mfhi $t5
	#printing
	la $a0,ans4	# print string before result
	li $v0,4
	syscall

	move $a0,$t5	# print integer result
	li $v0,1		# using syscall 1
	syscall
	
	li $v0,10		
	syscall	
	
	
	
	.data
prompt:  .asciiz "Enter value a: "
prompt2: .asciiz "Enter value b: "
ans1: .asciiz "Multiplication of a*b: "
ans2: .asciiz "Addition b to it: "
ans3: .asciiz "Divide it to a: "
ans4: .asciiz "Divide it to b: "
endl:	.asciiz "\n"
